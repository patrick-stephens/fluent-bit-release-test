name: Windows CI
on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  windows-build:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        Invoke-WebRequest -O winflexbison.zip $env:WINFLEXBISON
        Expand-Archive winflexbison.zip -Destination C:\WinFlexBison
        Copy-Item -Path C:\WinFlexBison/win_bison.exe C:\WinFlexBison/bison.exe
        Copy-Item -Path C:\WinFlexBison/win_flex.exe C:\WinFlexBison/flex.exe
        echo "C:\WinFlexBison" | Out-File -FilePath $env:GITHUB_PATH -Append
      env:
        WINFLEXBISON: https://github.com/lexxmark/winflexbison/releases/download/v2.5.22/win_flex_bison-2.5.22.zip
      shell: pwsh

    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Build Fluent Bit packages
      run: |
        cmake -G "NMake Makefiles" ../
        cmake --build .
        cpack
      working-directory: build

    - name: Upload build packages
      uses: actions/upload-artifact@v2
      with:
        name: windows-packages
        path: |
          build/fluent-bit-*.exe
          build/fluent-bit-*.zip
        if-no-files-found: error
        retention-days: 5

  windows-package-test:
    name: Windows package tests
    needs: windows-build
    runs-on: windows-latest
    env:
      # TODO: retrieve this programmatically from the artefact name when we download it
      VERSION: "1.9.0"
    steps:
    - name: Download packages
      uses: actions/download-artifact@v2
      with:
        name: windows-packages

    - name: Extract zip locally to test
      run: |
        Expand-Archive -PassThru -Force -Path "fluent-bit-${{ env.VERSION }}-win64.zip"
      shell: pwsh

    - name: Verify extraction
      timeout-minutes: 1
      run: |
        Test-Path -Path "bin\fluent-bit.exe"
        Test-Path -Path "conf\fluent-bit.conf"
        Test-Path -Path "conf\parsers.conf"
        Test-Path -Path "conf\plugins.conf"
      shell: pwsh
      working-directory: fluent-bit-${{ env.VERSION }}-win64\fluent-bit-${{ env.VERSION }}-win64

    - name: Run zip version with simple check on binary
      timeout-minutes: 1
      run: .\fluent-bit.exe --version
      shell: cmd
      working-directory: fluent-bit-${{ env.VERSION }}-win64\fluent-bit-${{ env.VERSION }}-win64\bin

    - name: Run zip version with simple config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -Verbose -PassThru -NoNewWindow -FilePath "fluent-bit.exe" -ArgumentList "-i", "dummy", "-o", "stdout"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          Write-Host "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        Write-Host "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: fluent-bit-${{ env.VERSION }}-win64\fluent-bit-${{ env.VERSION }}-win64\bin

    - name: Run zip version with default config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-c", "conf\fluent-bit.conf"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          Write-Host "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        Write-Host "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: fluent-bit-${{ env.VERSION }}-win64\fluent-bit-${{ env.VERSION }}-win64

    - name: Debug on failure
      if: failure()
      run: |
        ls -l bin/
        cat conf/fluent-bit.conf
      shell: pwsh
      working-directory: fluent-bit-${{ env.VERSION }}-win64\fluent-bit-${{ env.VERSION }}-win64

    - name: Run executable installer
      timeout-minutes: 5
      # Silent install accepting all defaults
      run: |
        Start-Process -NoNewWindow -FilePath "fluent-bit-${{ env.VERSION }}-win64.exe" -ArgumentList "/S", "/D=C:\fluent-bit"
      shell: pwsh

    - name: Verify installation
      timeout-minutes: 1
      run: |
        Test-Path -Path "C:\fluent-bit\bin\fluent-bit.exe"
        Test-Path -Path "C:\fluent-bit\conf\fluent-bit.conf"
        Test-Path -Path "C:\fluent-bit\conf\parsers.conf"
        Test-Path -Path "C:\fluent-bit\conf\plugins.conf"
      shell: pwsh

    - name: Run the installed version with default config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-c", "conf\fluent-bit.conf"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          Write-Host "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        Write-Host "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: C:\fluent-bit

    - name: Create a Fluent Bit service
      timeout-minutes: 1
      run: |
        New-Service fluent-bit -BinaryPathName "C:\fluent-bit\bin\fluent-bit.exe -c C:\fluent-bit\conf\fluent-bit.conf" -StartupType Manual
      shell: pwsh

    - name: Verify we have the new service
      run: |
        Get-Service -Name fluent-bit
      shell: pwsh

    - name: Start the service and check it runs
      timeout-minutes: 2
      run: |
        Start-Service fluent-bit
        Start-Sleep -s 60
        $service = Get-Service -Name fluent-bit
        if( $service.Status -ne 'Running' ) {
          Write-Host 'Service is not Running'
          exit 1
        }
        Write-Host 'Service is Running'
      shell: pwsh
