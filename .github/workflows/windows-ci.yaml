---
name: Windows CI

# This is only expected to be invoked on-demand by a specific user.
on:
  workflow_dispatch:

jobs:
  call-test-windows-packaging:
    name: Windows package tests
    runs-on: windows-latest
    env:
      VERSION: 1.8.11
    steps:
    - name: Info
      run: $PSVersionTable.PSVersion
      shell: pwsh

    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download packages locally
      run: |
        Invoke-WebRequest -Uri $Env:EXE_SOURCE -OutFile fluent-bit-installer.exe
        Invoke-WebRequest -Uri $Env:ZIP_SOURCE -OutFile fluent-bit.zip
      shell: pwsh
      env:
        EXE_SOURCE: https://fluentbit.io/releases/1.8/td-agent-bit-$VERSION-win64.exe
        ZIP_SOURCE: https://fluentbit.io/releases/1.8/td-agent-bit-$VERSION-win64.zip

    - name: Extract zip locally to test
      # Will end up in .\fluent-bit\td-agent-bit-<version>-win64\
      run: |
        Expand-Archive -PassThru -Force -Path "fluent-bit.zip"
      shell: pwsh

    - name: Run zip version with simple config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-i", "dummy", "-o", "stdout"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          echo "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        echo "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: fluent-bit\td-agent-bit-$VERSION-win64

    - name: Run zip version with default config
      # Default config prior to 1.9 is for Linux so will fail
      continue-on-error: true
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-c", "conf\fluent-bit.conf"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          echo "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        echo "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: fluent-bit\td-agent-bit-$VERSION-win64

    - name: Run executable installer
      timeout-minutes: 5
      # Silent install accepting all defaults
      run: fluent-bit-installer.exe /S /D=C:\fluent-bit
      shell: pwsh

    - name: Verify installation
      timeout-minutes: 1
      run:
        Test-Path -Path "C:\fluent-bit\bin\fluent-bit.exe" | Should -Be $true
        Test-Path -Path "C:\fluent-bit\conf\fluent-bit.conf" | Should -Be $true
        Test-Path -Path "C:\fluent-bit\conf\parsers.conf" | Should -Be $true
        Test-Path -Path "C:\fluent-bit\conf\plugins.conf" | Should -Be $true
      shell: pwsh

    - name: Run the installed version with default config
      timeout-minutes: 1
      run: |
        $fluentbit=Start-Process -PassThru -NoNewWindow -FilePath "bin\fluent-bit.exe" -ArgumentList "-c", "conf\fluent-bit.conf"
        Start-Sleep -s 15
        if ($fluentbit.HasExited) {
          echo "Fluent Bit exited prematurely"
          exit 1
        }
        Stop-Process -Force -InputObject $fluentbit
        Get-Process | Where-Object {$_.HasExited}
        echo "Fluent Bit exited correctly"
      shell: pwsh
      working-directory: C:\fluent-bit

    - name: Create a Fluent Bit service
      timeout-minutes: 1
      run: |
        $params = @{
          Name = "fluentbit"
          BinaryPathName = '"C:\fluent-bit\bin\fluent-bit.exe -c C:\fluent-bit\conf\fluent-bit.conf -w C:\fluent-bit"'
          DisplayName = "Fluent Bit"
          StartupType = "AutomaticDelayedStart"
          Description = "Fluent Bit log forwarding service."
        }
        New-Service @params
      shell: pwsh

    - name: Verify we have the new service
      run: Get-CimInstance -ClassName Win32_Service -Filter "Name='fluentbit'"
      shell: pwsh
