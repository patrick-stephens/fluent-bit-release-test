---
name: Release from staging

on:
  workflow_dispatch:

jobs:
  staging-release-packages-server:
    runs-on: ubuntu-18.04
    environment: release
    # Just sync everything to the release server
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup runner
      run: |
        sudo apt-get install rsync
      shell: bash

    - name: Hashed known hosts value
      id: known_hosts
      run: |
          OUTPUT=$(ssh-keyscan -H ${{ secrets.FLUENTBITIO_HOST }})
          echo ::set-output name=OUTPUT::$OUTPUT

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.FLUENTBITIO_SSHKEY }}
        known_hosts: ${{ steps.known_hosts.outputs.OUTPUT }}

    - name: Sync packages from staging on S3
      run: |
        mkdir -p packaging/releases
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_STAGING }}" packaging/releases/ --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash

    - name: Upload to build server
      run: |
        rsync -avz --dry-run packaging/releases/ $USERNAME@$HOST:/home/$USERNAME/apt
        rsync -avz packaging/releases/ $USERNAME@$HOST:/home/$USERNAME/apt
      env:
        HOST: ${{ secrets.FLUENTBITIO_HOST }}
        USERNAME: ${{ secrets.FLUENTBITIO_USERNAME }}
      shell: bash

  staging-release-packages-s3:
    runs-on: ubuntu-18.04 # no createrepo on more recent runners
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup runner
      run: |
        sudo apt-get install debsigs createrepo aptly rsync
      shell: bash

    - name: Get the version
      id: get_version
      run: |
        curl --fail -LO "$AWS_URL/latest-version.txt"
        VERSION=$(cat latest-version.txt)
        echo ::set-output name=VERSION::$VERSION
      shell: bash
      env:
        AWS_URL: https://${{ secrets.AWS_S3_BUCKET_STAGING }}.s3.amazonaws.com

    - name: Import GPG key for signing
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v4
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: GPG set up RPM keys for signing
      run: |
        KEYFILE=$(mktemp)
        gpg --export -a "${{ steps.import_gpg.outputs.name }}" > $KEYFILE
        rpm --import $KEYFILE
        rm -f $KEYFILE

    # Download the current release bucket
    # Add everything from staging
    # Sign and set up metadata for it all
    # Upload to release bucket

    - name: Sync packages from buckets on S3
      run: |
        mkdir -p packaging/releases
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_RELEASE }}" packaging/releases/ --no-progress
        aws s3 sync "s3://${{ secrets.AWS_S3_BUCKET_STAGING }}" packaging/releases/ --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash

    - name: Update repo info
      run: |
        VERSION=$(cat packaging/releases/latest-version.txt)
        packaging/update-repos.sh "$VERSION" packaging/releases/
      env:
        GPG_KEY: ${{ steps.import_gpg.outputs.name }}
      shell: bash

    - name: Sync to release bucket on S3
      run: |
        aws s3 sync packaging/releases/ "s3://${{ secrets.AWS_S3_BUCKET_RELEASE }}" --follow-symlinks --no-progress
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      shell: bash
